app:
  description: 智能报价函，具有AI推理能力
  icon: globe_with_meridians
  icon_background: '#FFEAD5'
  mode: workflow
  name: 智能报价函V3.0
  use_icon_as_answer_icon: false
dependencies:
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/siliconflow:0.0.24@7160c992e08b221174d60b5f231011978f812a22e6487f4e213f227000a82e65
kind: app
version: 0.3.1
workflow:
  conversation_variables: []
  environment_variables: []
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: start
        targetType: llm
      id: 1756172570320-source-1756172932141-target
      selected: false
      source: '1756172570320'
      sourceHandle: source
      target: '1756172932141'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 1756172932141-source-1756173649448-target
      selected: false
      source: '1756172932141'
      sourceHandle: source
      target: '1756173649448'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: if-else
      id: 1756173649448-source-1756174131677-target
      selected: false
      source: '1756173649448'
      sourceHandle: source
      target: '1756174131677'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: code
      id: 1756174131677-true-1756363745296-target
      selected: false
      source: '1756174131677'
      sourceHandle: 'true'
      target: '1756363745296'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: http-request
      id: 1756363745296-source-1756479076462-target
      selected: false
      source: '1756363745296'
      sourceHandle: source
      target: '1756479076462'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: http-request
        targetType: code
      id: 1756479076462-source-1756482706758-target
      selected: false
      source: '1756479076462'
      sourceHandle: source
      target: '1756482706758'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: end
      id: 1756482706758-source-1756364043223-target
      selected: false
      source: '1756482706758'
      sourceHandle: source
      target: '1756364043223'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: code
      id: 1756174131677-false-17567118853820-target
      source: '1756174131677'
      sourceHandle: 'false'
      target: '17567118853820'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: end
      id: 17567118853820-source-1756713148840-target
      source: '17567118853820'
      sourceHandle: source
      target: '1756713148840'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: 输入文本
        type: start
        variables:
        - label: user_input
          max_length: 256
          options: []
          required: true
          type: text-input
          variable: user_input
      height: 89
      id: '1756172570320'
      position:
        x: 30
        y: 262.5
      positionAbsolute:
        x: 30
        y: 262.5
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - '1756172570320'
          - user_input
        desc: ''
        model:
          completion_params:
            temperature: 0.8
          mode: chat
          name: Qwen/Qwen3-235B-A22B-Instruct-2507
          provider: langgenius/siliconflow/siliconflow
        prompt_config:
          jinja2_variables: []
        prompt_template:
        - edition_type: basic
          id: bc246dce-d87c-4f37-ae78-246937188150
          role: system
          text: "核心任务\n你是一个专业的信息提取助手，负责从用户的口语化描述中提取关键信息并生成标准化JSON数据。\n输入处理规则\n如果输入包含\
            \ #context# 标记，提取其中的文本内容\n如果是直接文本，则直接处理\n忽略所有JSON格式包装，只关注实际描述内容\n信息提取规则\n\
            1. 公司名称识别\n优先级规则：\n查找包含\"公司\"、\"企业\"、\"集团\"、\"有限公司\"的完整名称\n如\"深圳腾讯有限公司\"\
            、\"北京科技公司\"等\n如果找到，提取完整的公司名称\n如果未找到，使用\"待定客户\"\n2. 服务类型识别\n审计类服务 (service_category:\
            \ \"audit\")\n\"审计\"、\"年审\"、\"财务报表\"、\"财务审计\" → service_item: \"财务报表审计\"\
            \n\"验资\"、\"资本验证\"、\"出资\" → service_item: \"资本验证\"\n\"清算\"、\"破产\"、\"合并\"\
            、\"分立\" → service_item: \"合并、分立、清算审计\"\n\"经济责任\"、\"离任\"、\"任期\" → service_item:\
            \ \"经济责任审计\"\n\"清产核资\" → service_item: \"清产核资\"\n\"外汇\"、\"外币\" → service_item:\
            \ \"外汇收支审核\"\n\"专项\"、\"特定目的\" → service_item: \"特殊目的审计\"\n税务类服务 (service_category:\
            \ \"tax\")：\n\"汇算清缴\"、\"所得税申报\"、\"年度申报\"、\"企业所得税\" → service_item: \"\
            企业所得税汇算清缴纳税申报鉴证\"\n\"亏损\"、\"弥补\"、\"税前弥补\" → service_item: \"企业所得税税前弥补亏损鉴证\"\
            \n\"资产损失\"、\"报损\"、\"损失扣除\" → service_item: \"企业资产损失所得税前扣除鉴证\"\n\"土地增值税\"\
            、\"土地税\"、\"清算鉴证\" → service_item: \"土地增值税清算鉴证\"\n\"计时收费\"、\"按小时\"、\"工时\"\
            \ → service_item: \"计时收费\"\n3. 金额识别与类型判断\n金额提取：\n识别数字+单位（万、亿等）\n转换为纯数字：30万\
            \ → 300000.00\n如果没有明确金额，amount设为0\n金额类型判断：\n包含\"资产\"、\"资产总额\" → amount_type:\
            \ \"asset\"\n包含\"营收\"、\"营业收入\"、\"收入\" → amount_type: \"revenue\"\n包含\"\
            资本\"、\"实收资本\"、\"注册资本\" → amount_type: \"capital\"\n包含\"报损\"、\"损失金额\"、\"\
            资产损失\" → amount_type: \"loss_amount\"\n包含\"项目收入\"、\"土地收入\"、\"房地产收入\" →\
            \ amount_type: \"project_income\"\n默认使用 \"asset\"\n4. 年份计算\n明确提及\"X个年度\"\
            、\"X年亏损\" → years: X\n年份范围（如\"2021-2023年亏损\"）→ years: 计算跨度\n单个年份或未明确提及\
            \ → years: 1\n5.工时识别\n识别\"注册税务师X小时\"、\"项目经理X小时\"等\n提取到hours_by_level字段\n\
            6. 其他字段默认值\nshow_details: true\nverification_type: \"货币\"\nhours_by_level:\
            \ {}\nunit: \"1\"\nspecial_requirements: \"\"\n输出格式\n严格按照以下JSON格式输出，不要添加任何额外说明：\n\
            {\n  \"company_name\": \"提取的公司名称或待定客户\",\n  \"service_category\": \"audit或tax\"\
            ,\n  \"service_item\": \"具体服务项目名称\",\n  \"amount\": 数值（保留2位小数）,\n  \"\
            amount_type\": \"asset/revenue/capital\",\n  \"unit\": \"1\",\n  \"special_requirements\"\
            : \"\",\n  \"years\": 年份数量,\n  \"show_details\": true,\n  \"hours_by_level\"\
            : {},\n  \"verification_type\": \"货币\"\n}\n\n\n重要提醒\n始终先处理输入格式，提取实际内容\n\
            公司名称要提取完整，包含\"有限公司\"等后缀\n金额要进行单位转换（万→数字）\n输出必须是标准JSON格式，不带任何额外文字\n\n口语内容：{{#1756172570320.user_input#}}"
        selected: false
        structured_output:
          schema:
            additionalProperties: false
            properties:
              amount:
                type: string
              amount_type:
                type: string
              company_name:
                type: string
              hours_by_level:
                additionalProperties: false
                description: 小时和人员
                type: string
              service_category:
                description: 服务分类
                enum:
                - audit
                - tax
                type: string
              service_item:
                type: string
              show_details:
                type: string
              verification_type:
                type: string
              years:
                type: string
            required:
            - company_name
            - service_item
            - amount
            - show_details
            - amount_type
            - service_category
            type: object
        structured_output_enabled: true
        title: 抓取关键信息
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1756172932141'
      position:
        x: 365.86881025623234
        y: 262.5
      positionAbsolute:
        x: 365.86881025623234
        y: 262.5
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(extracted_info: str) -> dict:\n    import json\n    try:\n\
          \        if isinstance(extracted_info, str):\n            info = json.loads(extracted_info)\n\
          \        elif isinstance(extracted_info, dict):\n            info = extracted_info\n\
          \        else:\n            info = {\n                \"company_name\":\
          \ \"待定客户\",\n                \"service_category\": \"audit\",\n        \
          \        \"service_item\": \"财务报表审计\",\n                \"amount\": 0,\n\
          \                \"amount_type\": \"asset\",\n                \"unit\":\
          \ \"1\",\n                \"special_requirements\": \"输入格式错误\",\n      \
          \          \"show_details\": \"true\",\n                \"verification_type\"\
          : \"货币\",\n                \"years\": 1,\n                \"hours_by_level\"\
          : {}\n            }\n\n        company_name = str(info.get(\"company_name\"\
          , \"待定客户\"))\n        service_category = str(info.get(\"service_category\"\
          , \"audit\"))\n        service_item = str(info.get(\"service_item\", \"\
          财务报表审计\"))\n\n        try:\n            amount_value = float(info.get(\"\
          amount\", 0))\n            if amount_value == int(amount_value):\n     \
          \           amount = int(amount_value)\n            else:\n            \
          \    amount = round(amount_value, 2)\n        except:\n            amount\
          \ = 0\n\n        amount_type = str(info.get(\"amount_type\", \"asset\"))\n\
          \        unit = str(info.get(\"unit\", \"1\"))\n        special_requirements\
          \ = str(info.get(\"special_requirements\", \"\"))\n        \n        # 修改：将\
          \ show_details 转换为字符串\n        show_details_raw = info.get(\"show_details\"\
          , True)\n        if isinstance(show_details_raw, bool):\n            show_details\
          \ = \"true\" if show_details_raw else \"false\"\n        else:\n       \
          \     show_details = str(show_details_raw).lower()\n            \n     \
          \   verification_type = str(info.get(\"verification_type\", \"货币\"))\n \
          \       \n        try:\n            years = int(info.get(\"years\", 1))\n\
          \        except:\n            years = 1\n            \n        hours_by_level\
          \ = info.get(\"hours_by_level\", {})\n        if not isinstance(hours_by_level,\
          \ dict):\n            hours_by_level = {}\n\n    except Exception as e:\n\
          \        company_name = \"待定客户\"\n        service_category = \"audit\"\n\
          \        service_item = \"财务报表审计\"\n        amount = 0\n        amount_type\
          \ = \"asset\"\n        unit = \"1\"\n        special_requirements = f\"\
          解析错误: {str(e)}\"\n        show_details = \"true\"  # 修改：异常情况下也返回字符串\n  \
          \      verification_type = \"货币\"\n        years = 1\n        hours_by_level\
          \ = {}\n\n    return {\n        \"company_name\": company_name,\n      \
          \  \"service_category\": service_category,\n        \"service_item\": service_item,\n\
          \        \"amount\": amount,\n        \"amount_type\": amount_type,\n  \
          \      \"unit\": unit,\n        \"special_requirements\": special_requirements,\n\
          \        \"show_details\": show_details,\n        \"verification_type\"\
          : verification_type,\n        \"years\": years,\n        \"hours_by_level\"\
          : hours_by_level\n    }"
        code_language: python3
        desc: ''
        outputs:
          amount:
            children: null
            type: number
          amount_type:
            children: null
            type: string
          company_name:
            children: null
            type: string
          hours_by_level:
            children: null
            type: object
          service_category:
            children: null
            type: string
          service_item:
            children: null
            type: string
          show_details:
            children: null
            type: string
          special_requirements:
            children: null
            type: string
          unit:
            children: null
            type: string
          verification_type:
            children: null
            type: string
          years:
            children: null
            type: number
        selected: false
        title: JSON格式化
        type: code
        variables:
        - value_selector:
          - '1756172932141'
          - structured_output
          value_type: object
          variable: extracted_info
      height: 53
      id: '1756173649448'
      position:
        x: 701.1846883671014
        y: 262.5
      positionAbsolute:
        x: 701.1846883671014
        y: 262.5
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: is
            id: 81d6fdc6-7322-455a-87d3-bf0450cdfb0e
            value: audit
            varType: string
            variable_selector:
            - '1756173649448'
            - service_category
          id: 'true'
          logical_operator: and
        - case_id: b32b390a-1f85-4c1f-91fd-05ae9bae90c3
          conditions:
          - comparison_operator: contains
            id: d503f522-452d-4611-8cc1-56d5f5f381b1
            value: 这个不要的条件
            varType: string
            variable_selector:
            - '1756172932141'
            - text
          id: b32b390a-1f85-4c1f-91fd-05ae9bae90c3
          logical_operator: and
        desc: ''
        selected: false
        title: 服务类型分支
        type: if-else
      height: 173
      id: '1756174131677'
      position:
        x: 1056.7027004092374
        y: 230.7677588605789
      positionAbsolute:
        x: 1056.7027004092374
        y: 230.7677588605789
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\nfrom datetime import datetime\nfrom decimal import Decimal,\
          \ ROUND_HALF_UP\n\n\ndef round_to_2_decimal(value):\n    \"\"\"精确到小数点2位的四舍五入\"\
          \"\"\n    decimal_value = Decimal(str(value))\n    return float(decimal_value.quantize(Decimal('0.01'),\
          \ rounding=ROUND_HALF_UP))\n\n\ndef calculate_financial_audit_fee(amount,\
          \ return_details=False):\n    \"\"\"\n    计算财务报表审计收费（阶梯式分段累进计费）\n\n    收费标准（根据Excel表格）：\n\
          \    - 0-50万元：2,000元（固定）\n    - 50-100万元部分：该部分金额 × 0.200%\n    - 100-500万元部分：该部分金额\
          \ × 0.090%\n    - 500-1000万元部分：该部分金额 × 0.070%\n    - 1000-5000万元部分：该部分金额\
          \ × 0.050%\n    - 5000万元-1亿元部分：该部分金额 × 0.030%\n    - 1-5亿元部分：该部分金额 × 0.015%\n\
          \    - 5-10亿元部分：该部分金额 × 0.010%\n    - 10亿元以上部分：该部分金额 × 0.008%\n\n    例如：150万的计算\
          \ = 2000(50万固定) + 50万×0.2% + 50万×0.09% = 2000 + 1000 + 450 = 3450元\n   \
          \ \"\"\"\n\n    # 定义收费阶梯 收费标准定义\n    brackets = [\n        (500000, 2000,\
          \ 0),  # 0-50万：固定2000元\n        (1000000, 0, 0.002),  # 50-100万：0.2%\n \
          \       (5000000, 0, 0.0009),  # 100-500万：0.09%\n        (10000000, 0, 0.0007),\
          \  # 500-1000万：0.07%\n        (50000000, 0, 0.0005),  # 1000-5000万：0.05%\n\
          \        (100000000, 0, 0.0003),  # 5000万-1亿：0.03%\n        (500000000,\
          \ 0, 0.00015),  # 1-5亿：0.015%\n        (1000000000, 0, 0.0001),  # 5-10亿：0.01%\n\
          \        (float('inf'), 0, 0.00008)  # 10亿以上：0.008%\n    ]\n\n    total_fee\
          \ = 0\n    prev_limit = 0\n    calculation_steps = []\n\n    for upper_limit,\
          \ fixed_fee, rate in brackets:\n        if amount <= prev_limit:\n     \
          \       break\n\n        # 计算本段的计费基数 也就是超出部分 segment_amount 这个阶段要计算的钱\n\
          \        if amount <= upper_limit:\n            segment_amount = amount\
          \ - prev_limit\n        else:\n            segment_amount = upper_limit\
          \ - prev_limit\n\n        # 计算本段费用\n        if fixed_fee > 0:  # 固定收费\n\
          \            segment_fee = fixed_fee\n            calculation_steps.append(f\"\
          0-{upper_limit / 10000:.0f}万元: {fixed_fee}元（固定）\")\n        else:  # 按比例收费\n\
          \            segment_fee = segment_amount * rate\n            if segment_amount\
          \ > 0:\n                calculation_steps.append(\n                    f\"\
          {prev_limit / 10000:.0f}-{min(amount, upper_limit) / 10000:.0f}万元: \"\n\
          \                    f\"{segment_amount / 10000:.0f}万 × {rate * 100:.3f}%\
          \ = {segment_fee:.2f}元\"\n                )\n\n        total_fee += segment_fee\n\
          \n        if amount <= upper_limit:\n            break\n        prev_limit\
          \ = upper_limit\n\n    result = round_to_2_decimal(total_fee)\n\n    if\
          \ return_details:\n        return result, calculation_steps\n    return\
          \ result\n\n\ndef calculate_capital_verification_fee(amount, verification_type=\"\
          货币\", return_details=False):\n    \"\"\"\n    计算资本验证收费（阶梯式分段累进计费）\n\n  \
          \  货币出资收费标准：\n    - 0-50万元：1,200元（固定）\n    - 50-100万元部分：该部分金额 × 0.150%\n\
          \    - 100-500万元部分：该部分金额 × 0.040%\n    - 500-1000万元部分：该部分金额 × 0.030%\n \
          \   - 1000-5000万元部分：该部分金额 × 0.020%\n    - 5000万元-1亿元部分：该部分金额 × 0.015%\n\
          \    - 1-5亿元部分：该部分金额 × 0.010%\n    - 5-10亿元部分：该部分金额 × 0.008%\n    - 10亿元以上部分：该部分金额\
          \ × 0.006%\n\n    其他出资：按货币出资方式收费标准的120%计收\n    \"\"\"\n\n    # 定义收费阶梯\n\
          \    brackets = [\n        (500000, 1200, 0),  # 0-50万：固定1200元\n       \
          \ (1000000, 0, 0.0015),  # 50-100万：0.15%\n        (5000000, 0, 0.0004),\
          \  # 100-500万：0.04%\n        (10000000, 0, 0.0003),  # 500-1000万：0.03%\n\
          \        (50000000, 0, 0.0002),  # 1000-5000万：0.02%\n        (100000000,\
          \ 0, 0.00015),  # 5000万-1亿：0.015%\n        (500000000, 0, 0.0001),  # 1-5亿：0.01%\n\
          \        (1000000000, 0, 0.00008),  # 5-10亿：0.008%\n        (float('inf'),\
          \ 0, 0.00006)  # 10亿以上：0.006%\n    ]\n\n    total_fee = 0\n    prev_limit\
          \ = 0\n    calculation_steps = []\n\n    for upper_limit, fixed_fee, rate\
          \ in brackets:\n        if amount <= prev_limit:\n            break\n\n\
          \        # 计算本段的计费基数\n        if amount <= upper_limit:\n            segment_amount\
          \ = amount - prev_limit\n        else:\n            segment_amount = upper_limit\
          \ - prev_limit\n\n        # 计算本段费用\n        if fixed_fee > 0:  # 固定收费\n\
          \            segment_fee = fixed_fee\n            calculation_steps.append(f\"\
          0-{upper_limit / 10000:.0f}万元: {fixed_fee}元（固定）\")\n        else:  # 按比例收费\n\
          \            segment_fee = segment_amount * rate\n            if segment_amount\
          \ > 0:\n                calculation_steps.append(\n                    f\"\
          {prev_limit / 10000:.0f}-{min(amount, upper_limit) / 10000:.0f}万元: \"\n\
          \                    f\"{segment_amount / 10000:.0f}万 × {rate * 100:.3f}%\
          \ = {segment_fee:.2f}元\"\n                )\n\n        total_fee += segment_fee\n\
          \n        if amount <= upper_limit:\n            break\n        prev_limit\
          \ = upper_limit\n\n    # 其他出资按120%计算\n    if verification_type == \"其他\"\
          :\n        calculation_steps.append(f\"其他出资按120%计收: {total_fee:.2f} × 1.2\
          \ = {total_fee * 1.2:.2f}元\")\n        total_fee = total_fee * 1.2\n\n \
          \   result = round_to_2_decimal(total_fee)\n\n    if return_details:\n \
          \       return result, calculation_steps\n    return result\n\n\ndef calculate_medical_institution_audit_fee(amount,\
          \ return_details=False):\n    \"\"\"\n    计算医疗卫生机构等非盈利组织财务报表审计收费\n    按财务报表审计标准的不同比例收费：\n\
          \    - 1亿元以下部分：按财务报表审计标准下浮10%\n    - 1-5亿元部分：按财务报表审计标准下浮20%\n    - 5亿元以上部分：按财务报表审计标准下浮30%\n\
          \    \"\"\"\n\n    calculation_steps = []\n\n    # 先计算基础财务报表审计费用\n    base_fee,\
          \ base_steps = calculate_financial_audit_fee(amount, return_details=True)\n\
          \n    # 根据金额分段应用不同的折扣\n    if amount <= 100000000:  # 1亿元以下，下浮10%\n    \
          \    final_fee = base_fee * 0.9\n        calculation_steps.append(f\"基础审计费:\
          \ {base_fee:.2f}元\")\n        calculation_steps.append(f\"1亿元以下部分下浮10%:\
          \ {base_fee:.2f} × 0.9 = {final_fee:.2f}元\")\n    elif amount <= 500000000:\
          \  # 1-5亿元\n        # 分段计算\n        fee_1yi = calculate_financial_audit_fee(100000000)\n\
          \        fee_above_1yi = base_fee - fee_1yi\n\n        final_fee = fee_1yi\
          \ * 0.9 + fee_above_1yi * 0.8\n        calculation_steps.append(f\"1亿元部分基础费:\
          \ {fee_1yi:.2f} × 0.9 = {fee_1yi * 0.9:.2f}元\")\n        calculation_steps.append(f\"\
          1-5亿元部分基础费: {fee_above_1yi:.2f} × 0.8 = {fee_above_1yi * 0.8:.2f}元\")\n\
          \        calculation_steps.append(f\"总计: {final_fee:.2f}元\")\n    else:\
          \  # 5亿元以上\n        fee_1yi = calculate_financial_audit_fee(100000000)\n\
          \        fee_1to5yi = calculate_financial_audit_fee(500000000) - fee_1yi\n\
          \        fee_above_5yi = base_fee - calculate_financial_audit_fee(500000000)\n\
          \n        final_fee = fee_1yi * 0.9 + fee_1to5yi * 0.8 + fee_above_5yi *\
          \ 0.7\n        calculation_steps.append(f\"1亿元部分: {fee_1yi * 0.9:.2f}元\"\
          )\n        calculation_steps.append(f\"1-5亿元部分: {fee_1to5yi * 0.8:.2f}元\"\
          )\n        calculation_steps.append(f\"5亿元以上部分: {fee_above_5yi * 0.7:.2f}元\"\
          )\n        calculation_steps.append(f\"总计: {final_fee:.2f}元\")\n\n    result\
          \ = round_to_2_decimal(final_fee)\n\n    if return_details:\n        return\
          \ result, calculation_steps\n    return result\n\n\ndef calculate_time_based_fee(hours_by_level,\
          \ return_details=False):\n    \"\"\"\n    计算计时收费\n    收费标准（元/小时）：\n    -\
          \ 初级助理：300\n    - 助理：600\n    - 注册会计师：1000\n    - 项目经理：1500\n    - 部门经理：2000\n\
          \    - 合伙人/主任会计师：3000\n    \"\"\"\n    rates = {\n        \"初级助理\": 300,\n\
          \        \"助理\": 600,\n        \"注册会计师\": 1000,\n        \"项目经理\": 1500,\n\
          \        \"部门经理\": 2000,\n        \"合伙人\": 3000,\n        \"主任会计师\": 3000\n\
          \    }\n\n    total_fee = 0\n    calculation_steps = []\n\n    for level,\
          \ hours in hours_by_level.items():\n        if level in rates and hours\
          \ > 0:\n            fee = rates[level] * hours\n            total_fee +=\
          \ fee\n            calculation_steps.append(f\"{level}: {hours}小时 × {rates[level]}元/小时\
          \ = {fee}元\")\n\n    result = round_to_2_decimal(total_fee)\n\n    if return_details:\n\
          \        return result, calculation_steps\n    return result\n\n\ndef get_service_unit(service_item):\n\
          \    \"\"\"获取服务项目的计费单位\"\"\"\n    units = {\n        \"财务报表审计\": \"年\",\n\
          \        \"投资移民审计\": \"年\",\n        \"医疗卫生机构审计\": \"年\",\n        \"非盈利组织审计\"\
          : \"年\",\n        \"医疗卫生机构财务报表审计\": \"年\",\n        \"资本验证\": \"次\",\n \
          \       \"合并、分立、清算审计\": \"项\",\n        \"合并分立清算审计\": \"项\",\n        \"\
          经济责任审计\": \"项\",\n        \"清产核资\": \"项\",\n        \"外汇收支审核\": \"项\",\n\
          \        \"特殊目的审计\": \"项\"\n    }\n    return units.get(service_item, \"\
          项\")\n\n##计算费用\ndef calculate_audit_fee(service_item, amount, verification_type=None,\
          \ years=None, hours_by_level=None, return_details=False):\n    \"\"\"\n\
          \    根据服务项目计算审计收费（含计算明细）\n    \"\"\"\n\n    # 财务报表审计\n    if service_item\
          \ in [\"财务报表审计\", \"投资移民审计\"]:\n        return calculate_financial_audit_fee(amount,\
          \ return_details)\n\n    # 资本验证\n    elif service_item == \"资本验证\":\n  \
          \      verification_type = verification_type or \"货币\"\n        return calculate_capital_verification_fee(amount,\
          \ verification_type, return_details)\n\n    # 合并、分立、清算审计（按财务报表审计的150%，可多年累加）\n\
          \    elif service_item in [\"合并、分立、清算审计\", \"合并分立清算审计\"]:\n        base_fee\
          \ = calculate_financial_audit_fee(amount)\n        years = years or 1\n\
          \        calculation_steps = []\n\n        if years > 1:\n            total_fee\
          \ = 0\n            for year in range(1, years + 1):\n                if\
          \ year <= 3:  # 前三年按150%\n                    year_fee = base_fee * 1.5\n\
          \                    calculation_steps.append(f\"第{year}年: {base_fee:.2f}\
          \ × 150% = {year_fee:.2f}元\")\n                else:  # 超过三年按120%\n    \
          \                year_fee = base_fee * 1.2\n                    calculation_steps.append(f\"\
          第{year}年: {base_fee:.2f} × 120% = {year_fee:.2f}元\")\n                total_fee\
          \ += year_fee\n\n            result = round_to_2_decimal(total_fee)\n  \
          \          if return_details:\n                calculation_steps.append(f\"\
          合计: {result:.2f}元\")\n                return result, calculation_steps\n\
          \            return result\n        else:\n            result = round_to_2_decimal(base_fee\
          \ * 1.5)\n            if return_details:\n                return result,\
          \ [f\"财务报表审计基础费: {base_fee:.2f}元\",\n                                f\"\
          按150%计收: {base_fee:.2f} × 1.5 = {result:.2f}元\"]\n            return result\n\
          \n    # 经济责任审计（按财务报表审计的150%，可多年累加）\n    elif service_item == \"经济责任审计\"\
          :\n        base_fee = calculate_financial_audit_fee(amount)\n        years\
          \ = years or 1\n        calculation_steps = []\n\n        if years > 1:\n\
          \            total_fee = 0\n            for year in range(1, years + 1):\n\
          \                if year <= 3:  # 前三年按150%\n                    year_fee\
          \ = base_fee * 1.5\n                    calculation_steps.append(f\"第{year}年:\
          \ {base_fee:.2f} × 150% = {year_fee:.2f}元\")\n                else:  # 超过三年按120%\n\
          \                    year_fee = base_fee * 1.2\n                    calculation_steps.append(f\"\
          第{year}年: {base_fee:.2f} × 120% = {year_fee:.2f}元\")\n                total_fee\
          \ += year_fee\n\n            result = round_to_2_decimal(total_fee)\n  \
          \          if return_details:\n                calculation_steps.append(f\"\
          合计: {result:.2f}元\")\n                return result, calculation_steps\n\
          \            return result\n        else:\n            result = round_to_2_decimal(base_fee\
          \ * 1.5)\n            if return_details:\n                return result,\
          \ [f\"财务报表审计基础费: {base_fee:.2f}元\",\n                                f\"\
          按150%计收: {result:.2f}元\"]\n            return result\n\n    # 清产核资（按财务报表审计的200%）\n\
          \    elif service_item == \"清产核资\":\n        base_fee = calculate_financial_audit_fee(amount)\n\
          \        result = round_to_2_decimal(base_fee * 2)\n        if return_details:\n\
          \            return result, [f\"财务报表审计基础费: {base_fee:.2f}元\",\n        \
          \                    f\"按200%计收: {base_fee:.2f} × 2 = {result:.2f}元\"]\n\
          \        return result\n\n    # 外汇收支审核（计时收费，最低1000元）\n    elif service_item\
          \ == \"外汇收支审核\":\n        if hours_by_level:\n            fee, steps = calculate_time_based_fee(hours_by_level,\
          \ return_details=True)\n            result = max(1000, fee)\n          \
          \  if return_details:\n                if result == 1000:\n            \
          \        steps.append(f\"最低收费: 1000元\")\n                return result,\
          \ steps\n            return result\n        else:\n            if return_details:\n\
          \                return 1000, [\"最低收费: 1000元\"]\n            return 1000\n\
          \n    # 特殊目的审计 按照4收费标准\n    elif service_item == \"特殊目的审计\":\n        base_fee\
          \ = calculate_financial_audit_fee(amount)\n        result = round_to_2_decimal(base_fee\
          \ * 1.5)\n        if return_details:\n            return result, [f\"参照经济责任审计标准（财务报表审计的150%）:\
          \ {result:.2f}元\"]\n        return result\n\n    # 医疗卫生机构等非盈利组织审计\n    elif\
          \ service_item in [\"医疗卫生机构审计\", \"非盈利组织审计\", \"医疗卫生机构财务报表审计\"]:\n     \
          \   return calculate_medical_institution_audit_fee(amount, return_details)\n\
          \n    # 默认按财务报表审计收费\n    else:\n        return calculate_financial_audit_fee(amount,\
          \ return_details)\n\n\ndef main(verification_type=None, years=None, hours_by_level=None,\
          \ company_name=\"公司名称\", service_category=\"audit\", \n         service_item=\"\
          财务报表审计\", amount=0, amount_type=\"asset\", special_requirements=\"\", show_details=True)\
          \ -> dict:\n    \"\"\"\n    主函数：计算审计服务收费\n\n    参数：\n    - verification_type:\
          \ 验资类型（\"货币\"或\"其他\"）\n    - years: 年数（用于合并分立清算审计和经济责任审计）\n    - hours_by_level:\
          \ 计时收费的各级别工时字典\n    - company_name: 客户名称\n    - service_category: 服务类别\n\
          \    - service_item: 服务项目名称\n    - amount: 计费金额基数（单位：元）\n    - amount_type:\
          \ 金额类型（asset:资产总额, revenue:销售收入, capital:实收资本）\n    - special_requirements:\
          \ 特殊要求\n    - show_details: 是否显示计算明细\n\n    返回：\n    包含收费信息的字典\n    \"\"\
          \"\n\n    # 确保金额为数字\n    try:\n        amount_value = float(amount)\n  \
          \  except (ValueError, TypeError):\n        amount_value = 0\n\n    # 获取计费单位\n\
          \    service_unit = get_service_unit(service_item)\n\n    # 计算收费（含明细）\n\
          \    fee_result = calculate_audit_fee(\n        service_item=service_item,\n\
          \        amount=amount_value,\n        verification_type=verification_type,\n\
          \        years=years,\n        hours_by_level=hours_by_level,\n        return_details=True\n\
          \    )\n\n    if isinstance(fee_result, tuple):\n        fee_value, calculation_steps\
          \ = fee_result\n    else:\n        fee_value = fee_result\n        calculation_steps\
          \ = []\n\n    # 格式化金额和费用\n    amount_str = f\"{amount_value:,.0f}\" if amount_value\
          \ == int(amount_value) else f\"{amount_value:,.2f}\"\n    fee_str = f\"\
          {fee_value:,.0f}\" if fee_value == int(fee_value) else f\"{fee_value:,.2f}\"\
          \n\n    # 金额类型说明\n    amount_type_desc = {\n        \"asset\": \"资产总额\"\
          ,\n        \"revenue\": \"销售收入\",\n        \"capital\": \"实收资本\"\n    }\n\
          \n    # 构建返回结果\n    result = {\n        \"company_name\": str(company_name),\n\
          \        \"service_category\": str(service_category),\n        \"service_item\"\
          : str(service_item),\n        \"service_unit\": service_unit,\n        \"\
          amount\": amount_str,\n        \"amount_type\": amount_type_desc.get(amount_type,\
          \ amount_type),\n        \"special_requirements\": str(special_requirements),\n\
          \        \"fee\": fee_str,\n        \"date\": datetime.now().strftime(\"\
          %Y年%m月%d日\"),\n    }\n\n    # 添加计算明细（如果需要）\n    if show_details and calculation_steps:\n\
          \        result[\"calculation_details\"] = calculation_steps\n\n    return\
          \ result"
        code_language: python3
        desc: ''
        outputs:
          amount:
            children: null
            type: string
          amount_type:
            children: null
            type: string
          calculation_details:
            children: null
            type: array[string]
          company_name:
            children: null
            type: string
          date:
            children: null
            type: string
          fee:
            children: null
            type: string
          service_category:
            children: null
            type: string
          service_item:
            children: null
            type: string
          service_unit:
            children: null
            type: string
          special_requirements:
            children: null
            type: string
        selected: false
        title: 审计计算费用
        type: code
        variables:
        - value_selector:
          - '1756173649448'
          - company_name
          value_type: string
          variable: company_name
        - value_selector:
          - '1756173649448'
          - service_category
          value_type: string
          variable: service_category
        - value_selector:
          - '1756173649448'
          - service_item
          value_type: string
          variable: service_item
        - value_selector:
          - '1756173649448'
          - amount
          value_type: number
          variable: amount
        - value_selector:
          - '1756173649448'
          - amount_type
          value_type: string
          variable: amount_type
        - value_selector:
          - '1756173649448'
          - special_requirements
          value_type: string
          variable: special_requirements
        - value_selector:
          - '1756173649448'
          - show_details
          value_type: string
          variable: show_details
        - value_selector:
          - '1756173649448'
          - verification_type
          value_type: string
          variable: verification_type
        - value_selector:
          - '1756173649448'
          - years
          value_type: number
          variable: years
        - value_selector:
          - '1756173649448'
          - hours_by_level
          value_type: object
          variable: hours_by_level
      height: 53
      id: '1756363745296'
      position:
        x: 1356.8656567337987
        y: -40.6406204696662
      positionAbsolute:
        x: 1356.8656567337987
        y: -40.6406204696662
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1756363745296'
          - service_item
          value_type: string
          variable: service_item
        - value_selector:
          - '1756363745296'
          - company_name
          value_type: string
          variable: company_name
        - value_selector:
          - '1756363745296'
          - calculation_details
          value_type: array[string]
          variable: calculation_details
        - value_selector:
          - '1756482706758'
          - data
          value_type: string
          variable: data
        selected: false
        title: 结束 4
        type: end
      height: 168
      id: '1756364043223'
      position:
        x: 2598.804003207729
        y: -40.6406204696662
      positionAbsolute:
        x: 2598.804003207729
        y: -40.6406204696662
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        authorization:
          config: null
          type: no-auth
        body:
          data:
          - id: key-value-15
            key: ''
            type: text
            value: "{\n    \"company_name\": {{#1756363745296.company_name#}},\n \
              \   \"services\": [\n        {\"name\": {{#1756363745296.service_item#}},\
              \ \"total_fee\": {{#1756363745296.fee#}}},\n    ],\n   date:{{#1756363745296.date#}},\n\
              \    \"services_description\":{{#1756363745296.service_item#}}\n}"
          type: json
        desc: ''
        headers: ''
        method: post
        params: ''
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 100
        selected: false
        ssl_verify: false
        timeout:
          max_connect_timeout: 0
          max_read_timeout: 0
          max_write_timeout: 0
        title: 模板生成
        type: http-request
        url: http://frp1.mmszxc.xin:27680/api/generate_template/accounting
        variables: []
      height: 154
      id: '1756479076462'
      position:
        x: 1803.208858214319
        y: -46.76832309147101
      positionAbsolute:
        x: 1803.208858214319
        y: -46.76832309147101
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\n\ndef main(body: str) -> dict:\n    try:\n        body_json\
          \ = json.loads(body)  # 直接解析 body\n        return {\n            \"data\"\
          : body_json.get(\"data\", \"\")\n        }\n    except Exception as e:\n\
          \        return {\n            \"status_code\": 500,\n            \"error\"\
          : str(e)\n        }\n"
        code_language: python3
        desc: ''
        outputs:
          data:
            children: null
            type: string
        selected: false
        title: 代码执行 6
        type: code
        variables:
        - value_selector:
          - '1756479076462'
          - body
          value_type: string
          variable: body
      height: 53
      id: '1756482706758'
      position:
        x: 2216.2903226629996
        y: -40.6406204696662
      positionAbsolute:
        x: 2216.2903226629996
        y: -40.6406204696662
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\nfrom datetime import datetime\nfrom decimal import Decimal,\
          \ ROUND_HALF_UP\n\n\ndef round_to_2_decimal(value):\n    \"\"\"精确到小数点2位的四舍五入\"\
          \"\"\n    decimal_value = Decimal(str(value))\n    return float(decimal_value.quantize(Decimal('0.01'),\
          \ rounding=ROUND_HALF_UP))\n\n\ndef calculate_income_tax_filing_fee(amount,\
          \ return_details=False):\n    \"\"\"\n    计算企业所得税汇算清缴纳税申报鉴证收费（阶梯式分段累进计费）\n\
          \n    收费标准（按营业收入或资产总额）：\n    - 不超过100万元：0.3%，下限3000元\n    - 100-500万元部分：该部分金额\
          \ × 0.1%\n    - 500-1000万元部分：该部分金额 × 0.05%\n    - 1000-5000万元部分：该部分金额 ×\
          \ 0.03%\n    - 5000万-1亿元部分：该部分金额 × 0.02%\n    - 1-5亿元部分：该部分金额 × 0.01%\n\
          \    - 5-10亿元部分：该部分金额 × 0.005%\n    - 10亿元以上部分：该部分金额 × 0.002%\n    \"\"\"\
          \n\n    # 定义收费阶梯\n    brackets = [\n        (1000000, 3000, 0.003),  # 不超过100万：0.3%，下限3000元\n\
          \        (5000000, 0, 0.001),  # 100-500万：0.1%\n        (10000000, 0, 0.0005),\
          \  # 500-1000万：0.05%\n        (50000000, 0, 0.0003),  # 1000-5000万：0.03%\n\
          \        (100000000, 0, 0.0002),  # 5000万-1亿：0.02%\n        (500000000,\
          \ 0, 0.0001),  # 1-5亿：0.01%\n        (1000000000, 0, 0.00005),  # 5-10亿：0.005%\n\
          \        (float('inf'), 0, 0.00002)  # 10亿以上：0.002%\n    ]\n\n    total_fee\
          \ = 0\n    prev_limit = 0\n    calculation_steps = []\n\n    for upper_limit,\
          \ min_fee, rate in brackets:\n        if amount <= prev_limit:\n       \
          \     break\n\n        # 计算本段的计费基数\n        if amount <= upper_limit:\n\
          \            segment_amount = amount - prev_limit\n        else:\n     \
          \       segment_amount = upper_limit - prev_limit\n\n        # 计算本段费用\n\
          \        segment_fee = segment_amount * rate\n\n        # 第一档有最低收费限制\n \
          \       if prev_limit == 0 and min_fee > 0:\n            segment_fee = max(segment_fee,\
          \ min_fee)\n            calculation_steps.append(\n                f\"0-{upper_limit\
          \ / 10000:.0f}万元: {segment_amount / 10000:.0f}万 × {rate * 100:.3f}% = {segment_amount\
          \ * rate:.2f}元，\"\n                f\"按最低收费{min_fee}元计算\"\n            )\n\
          \        else:\n            if segment_amount > 0:\n                calculation_steps.append(\n\
          \                    f\"{prev_limit / 10000:.0f}-{min(amount, upper_limit)\
          \ / 10000:.0f}万元: \"\n                    f\"{segment_amount / 10000:.0f}万\
          \ × {rate * 100:.3f}% = {segment_fee:.2f}元\"\n                )\n\n    \
          \    total_fee += segment_fee\n\n        if amount <= upper_limit:\n   \
          \         break\n        prev_limit = upper_limit\n\n    result = round_to_2_decimal(total_fee)\n\
          \n    if return_details:\n        return result, calculation_steps\n   \
          \ return result\n\n\ndef calculate_asset_loss_fee(amount, return_details=False):\n\
          \    \"\"\"\n    计算企业资产损失所得税前扣除鉴证收费（阶梯式分段累进计费）\n\n    收费标准（按报损金额）：\n   \
          \ - 不超过100万元：1%，下限10000元\n    - 100-500万元部分：该部分金额 × 0.5%\n    - 500-1000万元部分：该部分金额\
          \ × 0.3%\n    - 1000-5000万元部分：该部分金额 × 0.2%\n    - 5000万-1亿元部分：该部分金额 × 0.1%\n\
          \    - 1-5亿元部分：该部分金额 × 0.05%\n    - 5-10亿元部分：该部分金额 × 0.03%\n    - 10亿元以上部分：该部分金额\
          \ × 0.01%\n    \"\"\"\n\n    # 定义收费阶梯\n    brackets = [\n        (1000000,\
          \ 10000, 0.01),  # 不超过100万：1%，下限10000元\n        (5000000, 0, 0.005),  #\
          \ 100-500万：0.5%\n        (10000000, 0, 0.003),  # 500-1000万：0.3%\n     \
          \   (50000000, 0, 0.002),  # 1000-5000万：0.2%\n        (100000000, 0, 0.001),\
          \  # 5000万-1亿：0.1%\n        (500000000, 0, 0.0005),  # 1-5亿：0.05%\n    \
          \    (1000000000, 0, 0.0003),  # 5-10亿：0.03%\n        (float('inf'), 0,\
          \ 0.0001)  # 10亿以上：0.01%\n    ]\n\n    total_fee = 0\n    prev_limit = 0\n\
          \    calculation_steps = []\n\n    for upper_limit, min_fee, rate in brackets:\n\
          \        if amount <= prev_limit:\n            break\n\n        # 计算本段的计费基数\n\
          \        if amount <= upper_limit:\n            segment_amount = amount\
          \ - prev_limit\n        else:\n            segment_amount = upper_limit\
          \ - prev_limit\n\n        # 计算本段费用\n        segment_fee = segment_amount\
          \ * rate\n\n        # 第一档有最低收费限制\n        if prev_limit == 0 and min_fee\
          \ > 0:\n            segment_fee = max(segment_fee, min_fee)\n          \
          \  calculation_steps.append(\n                f\"0-{upper_limit / 10000:.0f}万元:\
          \ {segment_amount / 10000:.0f}万 × {rate * 100:.1f}% = {segment_amount *\
          \ rate:.2f}元，\"\n                f\"按最低收费{min_fee}元计算\"\n            )\n\
          \        else:\n            if segment_amount > 0:\n                calculation_steps.append(\n\
          \                    f\"{prev_limit / 10000:.0f}-{min(amount, upper_limit)\
          \ / 10000:.0f}万元: \"\n                    f\"{segment_amount / 10000:.0f}万\
          \ × {rate * 100:.2f}% = {segment_fee:.2f}元\"\n                )\n\n    \
          \    total_fee += segment_fee\n\n        if amount <= upper_limit:\n   \
          \         break\n        prev_limit = upper_limit\n\n    result = round_to_2_decimal(total_fee)\n\
          \n    if return_details:\n        return result, calculation_steps\n   \
          \ return result\n\n\ndef calculate_land_value_added_tax_fee(amount, return_details=False):\n\
          \    \"\"\"\n    计算土地增值税清算鉴证收费（阶梯式分段累进计费）\n\n    收费标准（按项目收入或扣除项目金额）：\n \
          \   - 不超过5000万元：最低收费5万元\n    - 5000万-1亿元部分：该部分金额 × 0.08%\n    - 1-5亿元部分：该部分金额\
          \ × 0.07%\n    - 5-10亿元部分：该部分金额 × 0.06%\n    - 10亿元以上部分：该部分金额 × 0.05%\n\
          \    \"\"\"\n\n    # 定义收费阶梯\n    brackets = [\n        (50000000, 50000,\
          \ 0),  # 不超过5000万：最低50000元\n        (100000000, 0, 0.0008),  # 5000万-1亿：0.08%\n\
          \        (500000000, 0, 0.0007),  # 1-5亿：0.07%\n        (1000000000, 0,\
          \ 0.0006),  # 5-10亿：0.06%\n        (float('inf'), 0, 0.0005)  # 10亿以上：0.05%\n\
          \    ]\n\n    total_fee = 0\n    prev_limit = 0\n    calculation_steps =\
          \ []\n\n    for upper_limit, min_fee, rate in brackets:\n        if amount\
          \ <= prev_limit:\n            break\n\n        # 计算本段的计费基数\n        if amount\
          \ <= upper_limit:\n            segment_amount = amount - prev_limit\n  \
          \      else:\n            segment_amount = upper_limit - prev_limit\n\n\
          \        # 计算本段费用\n        if min_fee > 0:  # 第一档有最低收费\n            segment_fee\
          \ = min_fee\n            calculation_steps.append(f\"0-{upper_limit / 10000:.0f}万元:\
          \ 最低收费{min_fee}元\")\n        else:  # 按比例收费\n            segment_fee = segment_amount\
          \ * rate\n            if segment_amount > 0:\n                calculation_steps.append(\n\
          \                    f\"{prev_limit / 10000:.0f}-{min(amount, upper_limit)\
          \ / 10000:.0f}万元: \"\n                    f\"{segment_amount / 10000:.0f}万\
          \ × {rate * 100:.2f}% = {segment_fee:.2f}元\"\n                )\n\n    \
          \    total_fee += segment_fee\n\n        if amount <= upper_limit:\n   \
          \         break\n        prev_limit = upper_limit\n\n    result = round_to_2_decimal(total_fee)\n\
          \n    if return_details:\n        return result, calculation_steps\n   \
          \ return result\n\n\ndef calculate_tax_time_based_fee(hours_by_level, return_details=False):\n\
          \    \"\"\"\n    计算涉税鉴证业务计时收费\n    收费标准（元/小时）：\n    - 助理人员：200-500元/小时（取中位数350元）\n\
          \    - 项目负责人：500-1000元/小时（取中位数750元）\n    - 部门经理：1000-1500元/小时（取中位数1250元）\n\
          \    - 注册税务师（合伙人）：1500-2500元/小时（取中位数2000元）\n    \"\"\"\n    rates = {\n\
          \        \"助理人员\": 350,\n        \"助理\": 350,\n        \"项目负责人\": 750,\n\
          \        \"项目经理\": 750,\n        \"部门经理\": 1250,\n        \"注册税务师\": 2000,\n\
          \        \"合伙人\": 2000\n    }\n\n    total_fee = 0\n    calculation_steps\
          \ = []\n\n    for level, hours in hours_by_level.items():\n        if level\
          \ in rates and hours > 0:\n            fee = rates[level] * hours\n    \
          \        total_fee += fee\n            calculation_steps.append(f\"{level}:\
          \ {hours}小时 × {rates[level]}元/小时 = {fee}元\")\n\n    result = round_to_2_decimal(total_fee)\n\
          \n    if return_details:\n        return result, calculation_steps\n   \
          \ return result\n\n\ndef calculate_tax_service_fee(service_item, amount,\
          \ years=None, hours_by_level=None, return_details=False):\n    \"\"\"\n\
          \    根据服务项目计算税务服务收费（含计算明细）\n    \"\"\"\n\n    # 企业所得税汇算清缴纳税申报鉴证\n    if\
          \ service_item in [\"企业所得税汇算清缴纳税申报鉴证\", \"企业所得税汇算清缴\"]:\n        return\
          \ calculate_income_tax_filing_fee(amount, return_details)\n\n    # 企业所得税税前弥补亏损鉴证\n\
          \    elif service_item in [\"企业所得税税前弥补亏损鉴证\", \"税前弥补亏损鉴证\"]:\n        years\
          \ = years or 1\n        base_fee = calculate_income_tax_filing_fee(amount)\n\
          \        total_fee = base_fee * years\n\n        calculation_steps = []\n\
          \        if years > 1:\n            for year in range(1, years + 1):\n \
          \               calculation_steps.append(f\"第{year}个亏损年度: {base_fee:.2f}元\"\
          )\n            calculation_steps.append(f\"合计{years}个年度: {total_fee:.2f}元\"\
          )\n        else:\n            calculation_steps.append(f\"参照企业所得税汇算清缴标准:\
          \ {base_fee:.2f}元\")\n\n        result = round_to_2_decimal(total_fee)\n\
          \n        if return_details:\n            return result, calculation_steps\n\
          \        return result\n\n    # 企业资产损失所得税前扣除鉴证\n    elif service_item in\
          \ [\"企业资产损失所得税前扣除鉴证\", \"资产损失扣除鉴证\"]:\n        return calculate_asset_loss_fee(amount,\
          \ return_details)\n\n    # 土地增值税清算鉴证\n    elif service_item in [\"土地增值税清算鉴证\"\
          , \"土地增值税清算\"]:\n        return calculate_land_value_added_tax_fee(amount,\
          \ return_details)\n\n    # 计时收费\n    elif service_item in [\"计时收费\", \"\
          其他涉税鉴证\"]:\n        if hours_by_level:\n            return calculate_tax_time_based_fee(hours_by_level,\
          \ return_details)\n        else:\n            if return_details:\n     \
          \           return 0, [\"请提供各级别人员工时\"]\n            return 0\n\n    # 默认按企业所得税汇算清缴收费\n\
          \    else:\n        return calculate_income_tax_filing_fee(amount, return_details)\n\
          \n\ndef get_tax_service_unit(service_item):\n    \"\"\"获取税务服务项目的计费单位\"\"\
          \"\n    units = {\n        \"企业所得税汇算清缴纳税申报鉴证\": \"年\",\n        \"企业所得税汇算清缴\"\
          : \"年\",\n        \"企业所得税税前弥补亏损鉴证\": \"年\",\n        \"税前弥补亏损鉴证\": \"年\"\
          ,\n        \"企业资产损失所得税前扣除鉴证\": \"项\",\n        \"资产损失扣除鉴证\": \"项\",\n  \
          \      \"土地增值税清算鉴证\": \"项\",\n        \"土地增值税清算\": \"项\",\n        \"计时收费\"\
          : \"项\",\n        \"其他涉税鉴证\": \"项\"\n    }\n    return units.get(service_item,\
          \ \"项\")\n\n\ndef main(service_item: str, amount: str, years: str = None,\
          \ hours_by_level: str = None,\n         company_name: str = \"公司名称\", amount_type:\
          \ str = \"revenue\",\n         special_requirements: str = \"\", show_details:\
          \ str = \"true\") -> dict:\n    \"\"\"\n    主函数：计算税务服务收费\n\n    参数：\n  \
          \  - service_item: 服务项目名称\n    - amount: 计费金额基数（单位：元）\n    - years: 亏损年度数量（用于税前弥补亏损鉴证）\n\
          \    - hours_by_level: 各级别工时字典的JSON字符串（用于计时收费）\n    - company_name: 客户名称\n\
          \    - amount_type: 金额类型（revenue:营业收入, asset:资产总额, loss_amount:报损金额, project_income:项目收入）\n\
          \    - special_requirements: 特殊要求\n    - show_details: 是否显示计算明细\n\n    返回：\n\
          \    包含收费信息的字典\n    \"\"\"\n\n    # 参数处理\n    try:\n        amount_value\
          \ = float(amount)\n    except (ValueError, TypeError):\n        amount_value\
          \ = 0\n\n    try:\n        years_value = int(years) if years else None\n\
          \    except (ValueError, TypeError):\n        years_value = None\n\n   \
          \ try:\n        hours_dict = json.loads(hours_by_level) if hours_by_level\
          \ else None\n    except (json.JSONDecodeError, TypeError):\n        hours_dict\
          \ = None\n\n    show_details_bool = str(show_details).lower() == \"true\"\
          \n\n    # 获取计费单位\n    service_unit = get_tax_service_unit(service_item)\n\
          \n    # 计算收费（含明细）\n    fee_result = calculate_tax_service_fee(\n       \
          \ service_item=service_item,\n        amount=amount_value,\n        years=years_value,\n\
          \        hours_by_level=hours_dict,\n        return_details=True\n    )\n\
          \n    if isinstance(fee_result, tuple):\n        fee_value, calculation_steps\
          \ = fee_result\n    else:\n        fee_value = fee_result\n        calculation_steps\
          \ = []\n\n    # 格式化金额和费用\n    amount_str = f\"{amount_value:,.0f}\" if amount_value\
          \ == int(amount_value) else f\"{amount_value:,.2f}\"\n    fee_str = f\"\
          {fee_value:,.0f}\" if fee_value == int(fee_value) else f\"{fee_value:,.2f}\"\
          \n\n    # 金额类型说明\n    amount_type_desc = {\n        \"revenue\": \"营业收入\"\
          ,\n        \"asset\": \"资产总额\",\n        \"loss_amount\": \"报损金额\",\n  \
          \      \"project_income\": \"项目收入\"\n    }\n\n    # 构建返回结果\n    result =\
          \ {\n        \"company_name\": str(company_name),\n        \"service_category\"\
          : \"涉税鉴证业务\",\n        \"service_item\": str(service_item),\n        \"\
          service_unit\": service_unit,\n        \"amount\": amount_str,\n       \
          \ \"amount_type\": amount_type_desc.get(amount_type, amount_type),\n   \
          \     \"special_requirements\": str(special_requirements),\n        \"fee\"\
          : fee_str,\n        \"date\": datetime.now().strftime(\"%Y年%m月%d日\")\n \
          \   }\n\n    # 添加计算明细（如果需要）\n    if show_details_bool and calculation_steps:\n\
          \        result[\"calculation_details\"] = calculation_steps\n\n\n    return\
          \ result\n\n"
        code_language: python3
        desc: ''
        outputs:
          amount:
            children: null
            type: string
          amount_type:
            children: null
            type: string
          calculation_details:
            children: null
            type: array[string]
          company_name:
            children: null
            type: string
          date:
            children: null
            type: string
          fee:
            children: null
            type: string
          service_category:
            children: null
            type: string
          service_item:
            children: null
            type: string
          service_unit:
            children: null
            type: string
          special_requirements:
            children: null
            type: string
        selected: false
        title: 税务审计费用
        type: code
        variables:
        - value_selector:
          - '1756173649448'
          - company_name
          value_type: string
          variable: company_name
        - value_selector:
          - '1756173649448'
          - service_item
          value_type: string
          variable: service_item
        - value_selector:
          - '1756173649448'
          - amount
          value_type: number
          variable: amount
        - value_selector:
          - '1756173649448'
          - amount_type
          value_type: string
          variable: amount_type
        - value_selector:
          - '1756173649448'
          - special_requirements
          value_type: string
          variable: special_requirements
        - value_selector:
          - '1756173649448'
          - show_details
          value_type: string
          variable: show_details
        - value_selector:
          - '1756173649448'
          - years
          value_type: number
          variable: years
        - value_selector:
          - '1756173649448'
          - hours_by_level
          value_type: object
          variable: hours_by_level
      height: 53
      id: '17567118853820'
      position:
        x: 1368.9627104449764
        y: 497.5807814485977
      positionAbsolute:
        x: 1368.9627104449764
        y: 497.5807814485977
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '17567118853820'
          - amount
          value_type: string
          variable: amount
        - value_selector:
          - '17567118853820'
          - amount_type
          value_type: string
          variable: amount_type
        - value_selector:
          - '17567118853820'
          - calculation_details
          value_type: array[string]
          variable: calculation_details
        - value_selector:
          - '17567118853820'
          - company_name
          value_type: string
          variable: company_name
        - value_selector:
          - '17567118853820'
          - date
          value_type: string
          variable: date
        - value_selector:
          - '17567118853820'
          - fee
          value_type: string
          variable: fee
        - value_selector:
          - '17567118853820'
          - service_category
          value_type: string
          variable: service_category
        - value_selector:
          - '17567118853820'
          - service_item
          value_type: string
          variable: service_item
        - value_selector:
          - '17567118853820'
          - service_unit
          value_type: string
          variable: service_unit
        - value_selector:
          - '17567118853820'
          - special_requirements
          value_type: string
          variable: special_requirements
        selected: false
        title: 结束 6
        type: end
      height: 327
      id: '1756713148840'
      position:
        x: 1886.940387062626
        y: 497.5807814485977
      positionAbsolute:
        x: 1886.940387062626
        y: 497.5807814485977
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    viewport:
      x: -377.35824650482596
      y: 122.88617409746524
      zoom: 0.6597540000452959
